name: SVN to Git Migration

on:
  workflow_dispatch:
    inputs:
      repositories:
        description: 'JSON array of repository names'
        required: true
        default: '[""]'
        type: string
      cleanup:
        description: 'Clean up temporary directories after migration'
        required: false
        type: boolean
        default: true

env:
  SVN_BASE_URL: "https://svn.apache.org/repos/asf"
  GITHUB_BASE_URL: "git@github.com:devcwm"

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      repos: ${{ inputs.repositories }}
    steps:
      - name: Validate JSON input
        run: |
          echo '${{ inputs.repositories }}' | jq empty || {
            echo "Invalid JSON array format"
            exit 1
          }
          REPO_COUNT=$(echo '${{ inputs.repositories }}' | jq length)
          if [ $REPO_COUNT -eq 0 ]; then
            echo "Repository array cannot be empty"
            exit 1
          fi

  migrate-repo:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        repo: ${{fromJson(needs.prepare-matrix.outputs.repos)}}
      max-parallel: 5
      fail-fast: false

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y git git-svn subversion

      - name: Configure Git
        run: |
          git config --global user.name "GitHub Action Bot"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      # - name: Setup SSH Key
      #   uses: webfactory/ssh-agent@v0.7.0
      #   with:
      #     ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # - name: Create SVN credentials file
      #   run: |
      #     mkdir -p ~/.subversion/auth/svn.simple
      #     echo "${{ secrets.SVN_USERNAME }} ${{ secrets.SVN_PASSWORD }}" > ~/.subversion/auth/svn.simple/credentials
      #     chmod 600 ~/.subversion/auth/svn.simple/credentials

      - name: Migrate Repository
        env:
          SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
          SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        run: |
          SVN_REPO="${{ env.SVN_BASE_URL }}/${{ matrix.repo }}"
          GITHUB_REPO="${{ env.GITHUB_BASE_URL }}/${{ matrix.repo }}.git"

          TEMP_DIR="${{ matrix.repo }}_migration"
          mkdir -p "$TEMP_DIR"
          cd "$TEMP_DIR"

          echo "Cloning SVN repository..."
          git svn clone --username="$SVN_USERNAME" \
                      --no-auth-cache \
                      -t tags \
                      -b branches \
                      -T "trunk/${{ matrix.repo }}-trunk" \
                      "$SVN_REPO"

          cd "${{ matrix.repo }}" || exit 1

          echo "Fetching all from SVN..."
          git svn fetch --all

          echo "Adding GitHub remote..."
          git remote add origin "$GITHUB_REPO"

          # Check and push main branch if it exists
          if git show-ref --verify --quiet refs/heads/main; then
              echo "Pushing main branch..."
              git push --set-upstream origin main
          else
              echo "Main branch not found. Checking for master branch..."
              if git show-ref --verify --quiet refs/heads/master; then
                  echo "Pushing master branch..."
                  git push --set-upstream origin master
              else
                  echo "No main or master branch found. Checking for trunk..."
                  if git show-ref --verify --quiet refs/heads/trunk; then
                      echo "Pushing trunk branch..."
                      git push --set-upstream origin trunk
                  else
                      echo "Warning: No main, master, or trunk branch found!"
                  fi
              fi
          fi

          # Process all local branches
          echo "Processing local branches..."
          git branch | sed 's/^* //' | while read -r branch; do
              if [ "$branch" != "main" ] && [ "$branch" != "master" ] && [ "$branch" != "trunk" ]; then
                  if git show-ref --verify --quiet "refs/heads/$branch"; then
                      echo "Pushing local branch: $branch"
                      git checkout "$branch"
                      git push --set-upstream origin "$branch" || true
                  fi
              fi
          done

          # Process remote branches
          echo "Processing remote branches..."
          git for-each-ref refs/remotes --format='%(refname)' | grep -v 'origin/HEAD' | grep -v 'tags/' | while read -r remote_branch; do
              branch_name=${remote_branch#refs/remotes/}
              branch_name=${branch_name#origin/}
              if [ "$branch_name" != "trunk" ]; then
                  echo "Creating and pushing remote branch: $branch_name"
                  git checkout -b "$branch_name" "$remote_branch"
                  git push --set-upstream origin "$branch_name" || true
              fi
          done

          # Process and push tags
          echo "Processing tags..."
          git show-ref | grep refs/remotes/origin/tags | grep -v '@' | while read -r line; do
              tag=$(echo "$line" | perl -ne 'print "$1" if m!refs/remotes/origin/tags/(.*)!')
              if [ ! -z "$tag" ]; then
                  echo "Pushing tag: $tag"
                  git push origin "refs/remotes/origin/tags/$tag:refs/tags/$tag" || true
              fi
          done

      - name: Cleanup
        if: ${{ inputs.cleanup }}
        run: |
          cd ../..
          rm -rf "${{ matrix.repo }}_migration"

  notify:
    needs: migrate-repo
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Migration Status
        run: |
          if [ "${{ needs.migrate-repo.result }}" == "success" ]; then
            echo "✅ Migration completed successfully!"
          else
            echo "❌ Migration failed! Check job logs for details."
            exit 1
          fi